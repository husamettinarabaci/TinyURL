// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transforms.sql

package db

import (
	"context"
)

const createTransform = `-- name: CreateTransform :one
INSERT INTO transforms (
  owner,
  long_url,
  short_url
) VALUES (
  $1, $2, $3
) RETURNING id, owner, long_url, short_url, created_at
`

type CreateTransformParams struct {
	Owner    string `json:"owner"`
	LongUrl  string `json:"long_url"`
	ShortUrl string `json:"short_url"`
}

func (q *Queries) CreateTransform(ctx context.Context, arg CreateTransformParams) (Transform, error) {
	row := q.db.QueryRowContext(ctx, createTransform, arg.Owner, arg.LongUrl, arg.ShortUrl)
	var i Transform
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransform = `-- name: DeleteTransform :exec
DELETE FROM transforms
WHERE id = $1
`

func (q *Queries) DeleteTransform(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransform, id)
	return err
}

const getTransform = `-- name: GetTransform :one
SELECT id, owner, long_url, short_url, created_at FROM transforms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransform(ctx context.Context, id int64) (Transform, error) {
	row := q.db.QueryRowContext(ctx, getTransform, id)
	var i Transform
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getTransformForUpdate = `-- name: GetTransformForUpdate :one
SELECT id, owner, long_url, short_url, created_at FROM transforms
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTransformForUpdate(ctx context.Context, id int64) (Transform, error) {
	row := q.db.QueryRowContext(ctx, getTransformForUpdate, id)
	var i Transform
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listTransforms = `-- name: ListTransforms :many
SELECT id, owner, long_url, short_url, created_at FROM transforms
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTransformsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListTransforms(ctx context.Context, arg ListTransformsParams) ([]Transform, error) {
	rows, err := q.db.QueryContext(ctx, listTransforms, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transform
	for rows.Next() {
		var i Transform
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.LongUrl,
			&i.ShortUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransform = `-- name: UpdateTransform :one
UPDATE transforms
SET short_url = $2
WHERE id = $1
RETURNING id, owner, long_url, short_url, created_at
`

type UpdateTransformParams struct {
	ID       int64  `json:"id"`
	ShortUrl string `json:"short_url"`
}

func (q *Queries) UpdateTransform(ctx context.Context, arg UpdateTransformParams) (Transform, error) {
	row := q.db.QueryRowContext(ctx, updateTransform, arg.ID, arg.ShortUrl)
	var i Transform
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}
